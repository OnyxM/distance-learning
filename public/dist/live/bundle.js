/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	"use strict";
/******/ 	var __webpack_modules__ = ({

/***/ "./liveStreaming.js":
/*!**************************!*\
  !*** ./liveStreaming.js ***!
  \**************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\nObject(function webpackMissingModule() { var e = new Error(\"Cannot find module 'agora-rtc-sdk-ng'\"); e.code = 'MODULE_NOT_FOUND'; throw e; }());\n\r\n\r\nlet rtc = {\r\n    // For the local audio and video tracks.\r\n    localAudioTrack: null,\r\n    localVideoTrack: null,\r\n    client: null,\r\n};\r\n\r\nlet options = {\r\n    // Pass your app ID here.\r\n    appId: \"4495024a2d414911932996a968fc8559\",\r\n    // Set the channel name.\r\n    channel: \"237distance-learning\",\r\n    // Use a temp token\r\n    token: \"0064495024a2d414911932996a968fc8559IADsElzKaL7l5C/FHWeA2mYpVaBK5a5DozyWOC27bX4miFjRKA4AAAAAEACXaa56o7aGYgEAAQChtoZi\",\r\n    // Uid\r\n    uid: 123456,\r\n};\r\n\r\nasync function startBasicLiveStreaming() {\r\n    // rtc.client = AgoraRTC.createClient({mode: \"live\",codec: \"vp8\"});\r\n\r\n    window.onload = function () {\r\n\r\n        // pour join, récup l'id du user connecté et passer ça en option.uid ...\r\n        document.getElementById(\"host-join\").onclick = async function () {\r\n\r\n            rtc.client = Object(function webpackMissingModule() { var e = new Error(\"Cannot find module 'agora-rtc-sdk-ng'\"); e.code = 'MODULE_NOT_FOUND'; throw e; }())({mode: \"rtc\",codec: \"vp8\"});\r\n\r\n            // rtc.client.setClientRole(\"host\");\r\n\r\n            await rtc.client.join(options.appId, options.channel, options.token);\r\n\r\n            // Enable dual-stream mode.\r\n            rtc.client.enableDualStream();\r\n\r\n            // Create an audio track from the audio sampled by a microphone.\r\n            rtc.localAudioTrack = await Object(function webpackMissingModule() { var e = new Error(\"Cannot find module 'agora-rtc-sdk-ng'\"); e.code = 'MODULE_NOT_FOUND'; throw e; }())();\r\n            // Create a video track from the video captured by a camera.\r\n            rtc.localVideoTrack = await Object(function webpackMissingModule() { var e = new Error(\"Cannot find module 'agora-rtc-sdk-ng'\"); e.code = 'MODULE_NOT_FOUND'; throw e; }())();\r\n\r\n            // screen-sharing ...\r\n            // rtc.screenTrack = await AgoraRTC.createScreenVideoTrack();\r\n\r\n            // Publish the local audio and video tracks to the channel.\r\n            await rtc.client.publish([rtc.localAudioTrack, rtc.localVideoTrack]);\r\n\r\n            // Dynamically create a container in the form of a DIV element for playing the remote video track.\r\n            const localPlayerContainer = document.createElement(\"div\");\r\n\r\n            // Specify the ID of the DIV container. You can use the `uid` of the remote user.\r\n            localPlayerContainer.id = options.uid;\r\n            // localPlayerContainer.textContent = \"Local user \" + options.uid;\r\n            localPlayerContainer.style.width = \"290px\";\r\n            localPlayerContainer.style.height = \"290px\";\r\n            localPlayerContainer.classList.add('m-2');\r\n            document.getElementById(\"users_live\").append(localPlayerContainer);\r\n\r\n            rtc.localVideoTrack.play(localPlayerContainer);\r\n\r\n            rtc.client.on(\"user-published\", async (user, mediaType) => {\r\n                // Subscribe to a remote user.\r\n                await rtc.client.subscribe(user, mediaType);\r\n\r\n                // If the subscribed track is video.\r\n                if (mediaType === \"video\") {\r\n                    // Get `RemoteVideoTrack` in the `user` object.\r\n                    const remoteVideoTrack = user.videoTrack;\r\n                    // Dynamically create a container in the form of a DIV element for playing the remote video track.\r\n                    const remotePlayerContainer = document.createElement(\"div\");\r\n                    // Specify the ID of the DIV container. You can use the `uid` of the remote user.\r\n                    remotePlayerContainer.id = user.uid.toString();\r\n                    remotePlayerContainer.style.width = \"290px\";\r\n                    remotePlayerContainer.style.height = \"290px\";\r\n                    // remotePlayerContainer.textContent = \"Remote user \" + user.uid.toString();\r\n                    remotePlayerContainer.classList.add('m-2');\r\n                    document.getElementById(\"users_live\").append(remotePlayerContainer);\r\n\r\n                    // Play the remote video track.\r\n                    // Pass the DIV container and the SDK dynamically creates a player in the container for playing the remote video track.\r\n                    remoteVideoTrack.play(remotePlayerContainer);\r\n\r\n                    // Or just pass the ID of the DIV container.\r\n                    // remoteVideoTrack.play(playerContainer.id);\r\n                }\r\n\r\n                // If the subscribed track is audio.\r\n                if (mediaType === \"audio\") {\r\n                    // Get `RemoteAudioTrack` in the `user` object.\r\n                    const remoteAudioTrack = user.audioTrack;\r\n                    // Play the audio track. No need to pass any DOM element.\r\n                    remoteAudioTrack.play();\r\n                }\r\n            });\r\n\r\n            rtc.client.on(\"user-unpublished\", user => {\r\n                // Get the dynamically created DIV container.\r\n                const remotePlayerContainer = document.getElementById(user.uid);\r\n                // Destroy the container.\r\n                remotePlayerContainer.remove();\r\n            });\r\n\r\n            rtc.// Customize the video profile of the low-quality stream. Set the video profile as 160 × 120, 15 fps, 120 Kbps.\r\n                client.setLowStreamParameter({\r\n                width: 160,\r\n                height: 120,\r\n                framerate: 15,\r\n                bitrate: 120,\r\n            });\r\n\r\n            $(\"#host-join\").addClass('d-none');\r\n            $(\"#leave\").removeClass('d-none');\r\n        };\r\n\r\n        document.getElementById(\"audience-join\").onclick = async function () {\r\n            rtc.client = new Object(function webpackMissingModule() { var e = new Error(\"Cannot find module 'agora-rtc-sdk-ng'\"); e.code = 'MODULE_NOT_FOUND'; throw e; }())({mode: \"live\",codec: \"vp8\"});\r\n\r\n            rtc.client.setClientRole(\"audience\");\r\n            await rtc.client.join(options.appId, options.channel, options.token);\r\n            rtc.client.on(\"user-published\", async (user, mediaType) => {\r\n                // Subscribe to a remote user.\r\n                await rtc.client.subscribe(user, mediaType);\r\n                alert(user.uid);\r\n\r\n                // If the subscribed track is video.\r\n                if (mediaType === \"video\") {\r\n                    // Get `RemoteVideoTrack` in the `user` object.\r\n                    const remoteVideoTrack = user.videoTrack;\r\n                    // Dynamically create a container in the form of a DIV element for playing the remote video track.\r\n                    const remotePlayerContainer = document.createElement(\"div\");\r\n                    // Specify the ID of the DIV container. You can use the `uid` of the remote user.\r\n                    remotePlayerContainer.id = user.uid.toString();\r\n                    // remotePlayerContainer.textContent = \"Remote user \" + user.uid.toString();\r\n                    remotePlayerContainer.style.width = \"290px\";\r\n                    remotePlayerContainer.style.height = \"290px\";\r\n                    remotePlayerContainer.classList.add('m-2');\r\n                    document.body.append(remotePlayerContainer);\r\n\r\n                    // Play the remote video track.\r\n                    // Pass the DIV container and the SDK dynamically creates a player in the container for playing the remote video track.\r\n                    remoteVideoTrack.play(remotePlayerContainer);\r\n\r\n                    // Or just pass the ID of the DIV container.\r\n                    // remoteVideoTrack.play(playerContainer.id);\r\n                }\r\n\r\n                // If the subscribed track is audio.\r\n                if (mediaType === \"audio\") {\r\n                    // Get `RemoteAudioTrack` in the `user` object.\r\n                    const remoteAudioTrack = user.audioTrack;\r\n                    // Play the audio track. No need to pass any DOM element.\r\n                    remoteAudioTrack.play();\r\n                }\r\n            });\r\n\r\n            rtc.client.on(\"user-unpublished\", user => {\r\n                // Get the dynamically created DIV container.\r\n                const remotePlayerContainer = document.getElementById(user.uid);\r\n                // Destroy the container.\r\n                remotePlayerContainer.remove();\r\n            });\r\n        };\r\n\r\n        document.getElementById(\"leave\").onclick = async function () {\r\n            rtc.client = Object(function webpackMissingModule() { var e = new Error(\"Cannot find module 'agora-rtc-sdk-ng'\"); e.code = 'MODULE_NOT_FOUND'; throw e; }())({mode: \"live\",codec: \"vp8\"});\r\n\r\n            // Close all the local tracks.\r\n            rtc.localAudioTrack.close();\r\n            rtc.localVideoTrack.close();\r\n            // Traverse all remote users.\r\n            rtc.client.remoteUsers.forEach(user => {\r\n                // Destroy the dynamically created DIV containers.\r\n                const playerContainer = document.getElementById(user.uid);\r\n                playerContainer && playerContainer.remove();\r\n            });\r\n\r\n            // Leave the channel.\r\n            await rtc.client.leave();\r\n\r\n            // savoir que c'est l'admin et supprimé le live\r\n\r\n            window.location = $('#prev').html();\r\n            // window.location = \"https://distance-learning-237.herokuapp.com/user/live\";\r\n        };\r\n    };\r\n}\r\n\r\nstartBasicLiveStreaming();\r\n\n\n//# sourceURL=webpack:///./liveStreaming.js?");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The require scope
/******/ 	var __webpack_require__ = {};
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__["./liveStreaming.js"](0, __webpack_exports__, __webpack_require__);
/******/ 	
/******/ })()
;